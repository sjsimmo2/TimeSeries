[["introduction.html", "Chapter 2 Introduction 2.1 Other plots 2.2 Time series decomposition 2.3 Missing values 2.4 Python code and results for Time Series plot 2.5 SAS code for time series plot and decomposition", " Chapter 2 Introduction This document provides the code and output from Time Series I. This is a living document and may be updated throughout the semester (when this occurs, you will be notified that it has been updated). First, here is a list of some the libraries that you will need: library(readr) library(fpp3) library(fable) library(fabletools) library(lubridate) library(expsmooth) library(lmtest) library(zoo) library(seasonal) library(ggplot2) library(seasonalview) library(aTSA) library(reticulate) use_python(&quot;C:\\\\ProgramData\\\\Anaconda3\\\\envs\\\\R_Env2\\\\python.exe&quot;) #use_python(&quot;C:\\\\ProgramData\\\\Anaconda3\\\\python.exe&quot;) The data sets that you will need are as follows (be sure to put the correct location and file name for your computer): file.dir = &quot;https://raw.githubusercontent.com/sjsimmo2/TimeSeries/master/&quot; input.file1 = &quot;usairlines.csv&quot; input.file2 = &quot;steel.csv&quot; input.file3 = &quot;leadyear.csv&quot; input.file4 = &quot;ebay9899.csv&quot; input.file5 = &quot;fpp_insurance.csv&quot; input.file6 = &quot;ar2.csv&quot; input.file7 = &quot;MA2.csv&quot; input.file8 = &quot;hurrican.csv&quot; # Reads the data at specified directory # If the file directory is incorrect, then this won&#39;t run USAirlines = read_csv(paste(file.dir, input.file1,sep = &quot;&quot;),show_col_types = FALSE) Steel = read_csv(paste(file.dir, input.file2, sep = &quot;&quot;),show_col_types = FALSE) Lead.Year = read_csv(paste(file.dir, input.file3, sep = &quot;&quot;),show_col_types = FALSE) Ebay = read_csv(paste(file.dir, input.file4, sep = &quot;&quot;),show_col_types = FALSE) Quotes= read_csv(paste(file.dir, input.file5, sep = &quot;&quot;),show_col_types = FALSE) Y= read_csv(paste(file.dir, input.file6, sep = &quot;&quot;),show_col_types = FALSE) x=read_csv(paste(file.dir, input.file7, sep = &quot;&quot;),show_col_types = FALSE) hurricane=read_csv(paste(file.dir, input.file8, sep = &quot;&quot;),show_col_types = FALSE) temp&lt;-read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\minntemp.csv&quot;, show_col_types = FALSE) For most of the applications we will be using, you will first need to create a tsibble. In order to create a tsibble, you need to have a column that identifies the date (which we will indicate with “index”). The code below creates tsibble for the Steel data set and the Minneapolis temperature data set: Steel &lt;- Steel |&gt; mutate(date = seq(ymd(&#39;1932-07-01&#39;),ymd(&#39;1980-01-01&#39;),by=&#39;6 months&#39;)) steel_ts&lt;-Steel |&gt; mutate(Month=yearmonth(date)) |&gt; as_tsibble(index=Month) autoplot(steel_ts,steelshp) + labs(title= &quot;Iron and Steel Exports&quot;, subtitle = &quot;Weight in tons&quot;, y= &quot;Export&quot;) + theme_classic() temp_ts&lt;-temp |&gt; mutate(date = seq(ymd(&#39;1900-01-01&#39;),ymd(&#39;1966-03-01&#39;),by=&#39;months&#39;)) |&gt; mutate(Month=yearmonth(date)) |&gt; as_tsibble(index=Month) autoplot(temp_ts,Temp) + labs(title=&quot;Minneapolis temperature&quot;, y= &quot;Temperature&quot;) + theme_classic() Another example of creating a tsibble with the US Airlines data set: USAirlines_ts &lt;- USAirlines |&gt; mutate(date=myd(paste(Month, Year, &quot;1&quot;))) |&gt; mutate(Month2=yearmonth(date)) |&gt; as_tsibble(index=Month2) autoplot(USAirlines_ts,Passengers) 2.1 Other plots Some other interesting plots we can look at is the seasonal plot (only if our time series has a seasonal component….if you have yearly data, this is not possible since each line represents one year). USAirlines_ts |&gt; gg_season(Passengers, labels = &quot;both&quot;) + labs(y = &quot;Passengers&quot;, title = &quot;Seasonal plot: US Airline Passengers&quot;) We can further explore seasonal patterns by a subseries plot (again ONLY if there is a seasonal component): USAirlines_ts |&gt; gg_subseries(Passengers) + labs( y = &quot;Passengers&quot;, title = &quot;US Airline Passengers&quot; ) 2.2 Time series decomposition IF your time series has a seasonal component to it, a useful visualization is the decomposition. We will first look at the STL decomposition (which can only do the additive decomposition, NOT multiplicative!). The following code creates the decomposition and then plots it: # Time Series Decomposition ...STL# dcmp &lt;- USAirlines_ts |&gt; model(stl = STL(Passengers)) components(dcmp) ## # A dable: 219 x 7 [1M] ## # Key: .model [1] ## # : Passengers = trend + season_year + remainder ## .model Month2 Passengers trend season_year remainder season_adjust ## &lt;chr&gt; &lt;mth&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 stl 1990 Jan 34348 39033. -4676. -8.97 39024. ## 2 stl 1990 Feb 33536 38897. -5842. 481. 39378. ## 3 stl 1990 Mar 40578 38762. 1238. 578. 39340. ## 4 stl 1990 Apr 38267 38626. -563. 204. 38830. ## 5 stl 1990 May 38249 38494. 378. -623. 37871. ## 6 stl 1990 Jun 40792 38362. 2950. -519. 37842. ## 7 stl 1990 Jul 42225 38229. 5219. -1223. 37006. ## 8 stl 1990 Aug 44943 38090. 6551. 302. 38392. ## 9 stl 1990 Sep 35708 37951. -1956. -287. 37664. ## 10 stl 1990 Oct 38286 37812. 345. 129. 37941. ## # ℹ 209 more rows components(dcmp) |&gt; autoplot() + theme_classic() We can visualize the time series with the trend component overlaid with it: components(dcmp) |&gt; as_tsibble() |&gt; autoplot(Passengers, colour=&quot;gray&quot;) + geom_line(aes(y=trend), colour = &quot;#D55E00&quot;) + labs( y = &quot;Passengers&quot;, title = &quot;US Airline Passengers with trend overlaid&quot; ) We can also overlay plots with the seasonally adjusted values (plot below has both trend and seasonally adjusted overlaid): components(dcmp) |&gt; as_tsibble() |&gt; autoplot(Passengers, colour=&quot;gray&quot;) + geom_line(aes(y=season_adjust), colour = &quot;#D55E00&quot;) + labs( y = &quot;Passengers&quot;, title = &quot;US Airline Passengers with seasonally adjusted overlaid&quot; ) ## Both components(dcmp) |&gt; as_tsibble() |&gt; autoplot(Passengers, colour=&quot;gray&quot;) + geom_line(aes(y=season_adjust), colour = &quot;#D55E00&quot;) + geom_line(aes(y=trend),colour=&quot;blue&quot;)+ labs( y = &quot;Passengers&quot;, title = &quot;US Airline Passengers &quot; ) Notice that the trend component is VERY similar to the “seasonally adjusted” data! Do you know what the difference between the lines are? We can also do a classical decomposition (this can do an additive decomposition and a multiplicative decomposition). USAirlines_ts |&gt; model( classical_decomposition(Passengers, type = &quot;additive&quot;) ) |&gt; components() |&gt; autoplot() + labs(title = &quot;Classical additive decomposition of US Airline Passengers&quot;) ## Warning: Removed 6 rows containing missing values or values outside the scale range ## (`geom_line()`). The last decomposition we will look at is the X11 decomposition (done by the government). This is a very complex algorithm that does the decomposition. x11_dcmp &lt;- USAirlines_ts |&gt; model(x11 = X_13ARIMA_SEATS(Passengers ~ x11())) |&gt; components() autoplot(x11_dcmp) + labs(title = &quot;Decomposition of US Airline Passengers using X-11.&quot;) We can also look at the strength of the trend and seasonal components in a decomposition (within the STL decomposition): USAirlines_ts |&gt; features(Passengers, feat_stl) ## # A tibble: 1 × 9 ## trend_strength seasonal_strength_year seasonal_peak_year seasonal_trough_year ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.976 0.919 7 2 ## # ℹ 5 more variables: spikiness &lt;dbl&gt;, linearity &lt;dbl&gt;, curvature &lt;dbl&gt;, ## # stl_e_acf1 &lt;dbl&gt;, stl_e_acf10 &lt;dbl&gt; 2.3 Missing values We actually need to put the series in the OLD format to use the package imputeTS (will probably get updated, just not yet). We will illustrate this with the US Airlines data set (but first we need to create the missing values). #### Make some missing values: set.seed(19076) miss_val&lt;-sample(1:nrow(USAirlines),30,replace=F) miss_val&lt;-c(miss_val,102,104:107) US_temp&lt;-USAirlines US_temp$Passengers[miss_val]&lt;-NA col_vector=rep(&quot;blue&quot;,nrow(USAirlines)) col_vector[miss_val]=&quot;red&quot; ### Create ts using the old way: library(imputeTS) ## ## Attaching package: &#39;imputeTS&#39; ## The following object is masked from &#39;package:zoo&#39;: ## ## na.locf library(forecast) Pass_miss&lt;-ts(US_temp$Passengers,start = c(1990,1),frequency = 12) ggplot_na_distribution(Pass_miss)+labs(y=&quot;US Airline Passengers&quot;) # Interpolate the missing observations in this data set Pass_impute&lt;-Pass_miss %&gt;% na_interpolation(option = &quot;spline&quot;) autoplot(Pass_impute,color=col_vector) + labs(y=&quot;Airline Passengers&quot;) Pass_impute&lt;-Pass_miss %&gt;% na_seadec(algorithm = &quot;interpolation&quot;) autoplot(Pass_impute,color=col_vector) + labs(y=&quot;Airline Passengers&quot;) 2.4 Python code and results for Time Series plot The following code shows the time series plot and classical decomposition (using additive model). import pandas as pd import numpy as np import matplotlib.pyplot as plt from matplotlib import pyplot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.seasonal import STL from statsforecast import StatsForecast usair_p=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\usairlines.csv&quot;) df=pd.date_range(start=&#39;1/1/1990&#39;, end=&#39;3/1/2008&#39;, freq=&#39;MS&#39;) usair_p.index=pd.to_datetime(df) plt.plot(usair_p[&quot;Passengers&quot;]) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Passengers&quot;) plt.title(&quot;Airline Passengers&quot;) plt.show() ## Classical Decomposition result = seasonal_decompose(usair_p[&quot;Passengers&quot;], model=&#39;additive&#39;, period=12) result.plot() pyplot.show() You can also specify multiplicative by changing “additive” to “multiplicative” in the Python code. If you want to do the STL decomposition, then you can apply the following code: import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.seasonal import STL usair_p=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\usairlines.csv&quot;) df=pd.date_range(start=&#39;1/1/1990&#39;, end=&#39;3/1/2008&#39;, freq=&#39;MS&#39;) usair_p.index=pd.to_datetime(df) ## STL Decomposition from statsforecast.models import MSTL d = {&#39;unique_id&#39;: 1, &#39;ds&#39;: usair_p.index, &#39;y&#39;: usair_p[&#39;Passengers&#39;]} usair_sf = pd.DataFrame(data = d) dcmp = StatsForecast(models = [MSTL(season_length = 12)], freq = &#39;M&#39;) dcmp.fit(df = usair_sf) ## StatsForecast(models=[MSTL]) result = dcmp.fitted_[0,0].model_ result ## data trend seasonal remainder ## 0 34348.0 39019.259582 -4656.824185 -14.435397 ## 1 33536.0 38883.032235 -5824.359162 477.326927 ## 2 40578.0 38749.492861 1252.473058 576.034080 ## 3 38267.0 38618.252549 -554.514256 203.261707 ## 4 38249.0 38488.211906 388.629101 -627.841007 ## .. ... ... ... ... ## 214 61967.0 64483.390709 -2942.503405 426.112696 ## 215 60907.0 64538.640065 -1897.489966 -1734.150099 ## 216 57800.0 64584.717962 -6231.124988 -553.592974 ## 217 57109.0 64621.674775 -7705.357902 192.683127 ## 218 67818.0 64650.268751 3776.567142 -608.835893 ## ## [219 rows x 4 columns] dcmp.fitted_[0, 0].model_.plot(subplots=True, grid=True) ## array([&lt;Axes: &gt;, &lt;Axes: &gt;, &lt;Axes: &gt;, &lt;Axes: &gt;], dtype=object) plt.tight_layout() plt.show() 2.5 SAS code for time series plot and decomposition The following code is in SAS (creates the time series plot and the decomposition…which is the next section). The use of the id statement can only be used if the series has a properly formatted date column. Great thing about SAS is that if there is a missing value (or missing date), it will impute it for you. It can also aggregate easily in SAS. If you do not have a date column, you can still use this command, you will use seasonality = and then set the length of the season. However, if you use the seasonality option, SAS will not recognize missing dates. Create library for data sets   libname Time ‘Q:Drive - Time Series’;   run;   Time series plot and decomposition of Airline Passengers   proc timeseries data=Time.USAirlines plots=(series decomp sc);   id date interval=month;   var Passengers;   run;   Time series and decomposition of Airline Passengers, but now the seasonal cycle is set to a year   proc timeseries data=Time.USAirlines plots=(series decomp sc) seasonality=12;   var Passengers;   run;   proc timeseries data=Time.Steel plots=(series decomp sc) seasonality=12;   var steelshp;   run;   "]]
