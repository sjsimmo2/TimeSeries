[["exponential-smoothing.html", "Chapter 3 Exponential Smoothing 3.1 Simple Exponential Smoothing 3.2 Holt ESM 3.3 Holt-Winters 3.4 Evaluating forecasts 3.5 ETS 3.6 Python Code for Exponential Smoothing", " Chapter 3 Exponential Smoothing In R, we are able to do Simple (or Single) Exponential Smoothing Models, Holt Exponential Smoothing Models and Holt-Winters Exponential Smoothing Models. For the first two (Simple and Holt), we will be using the Steel data set and for the last one (Holt-Winters), we will be using the airline data set (we will also use the airline data set to illustrate the damped trend model). Each of these are shown below. 3.1 Simple Exponential Smoothing For Simple Exponential Smoothing Models (SES), we have only one component, referred to as the level component. \\[\\hat{Y}_{t+1}= L_{t}\\\\ L_{t} = \\theta Y_{t} + (1-\\theta)L_{t-1}\\] This is basically a weighted average with the last observation and the last predicted value. Since this only has a level component, forecasts from SES models will be a horizontal line (hence why this method is called one-step ahead forecasting). In the R code, you can choose how the initial values are selected. If you specify simple, then the first few observations will be used to estimate the starting value. If you select optimal, then the algorithm uses the ets algorithm (will be discussed later) to optimize the starting values and the smoothing parameters. You can also specify the value for h, which is the number of forecasts to create (take a look at the forecastdo you see a horizontal line?). # Building a Single Exponential Smoothing (SES) Model - Steel Data # SES.Steel &lt;- ses(SteelShp, initial = &quot;simple&quot;, h = 24) summary(SES.Steel) ## ## Forecast method: Simple exponential smoothing ## ## Model Information: ## Simple exponential smoothing ## ## Call: ## ses(y = SteelShp, h = 24, initial = &quot;simple&quot;) ## ## Smoothing parameters: ## alpha = 0.4549 ## ## Initial states: ## l = 5980 ## ## sigma: 460.4357 ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 11.43866 460.4357 363.9341 -0.2204828 5.708307 0.8287599 ## ACF1 ## Training set -0.04379112 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 1992 6479.571 5889.499 7069.643 5577.133 7382.008 ## Feb 1992 6479.571 5831.305 7127.836 5488.134 7471.007 ## Mar 1992 6479.571 5777.922 7181.219 5406.492 7552.649 ## Apr 1992 6479.571 5728.323 7230.819 5330.636 7628.505 ## May 1992 6479.571 5681.801 7277.340 5259.487 7699.654 ## Jun 1992 6479.571 5637.847 7321.295 5192.265 7766.876 ## Jul 1992 6479.571 5596.077 7363.065 5128.383 7830.758 ## Aug 1992 6479.571 5556.194 7402.947 5067.388 7891.754 ## Sep 1992 6479.571 5517.964 7441.177 5008.920 7950.221 ## Oct 1992 6479.571 5481.197 7477.944 4952.690 8006.452 ## Nov 1992 6479.571 5445.736 7513.405 4898.458 8060.684 ## Dec 1992 6479.571 5411.453 7547.689 4846.025 8113.116 ## Jan 1993 6479.571 5378.236 7580.906 4795.224 8163.917 ## Feb 1993 6479.571 5345.992 7613.150 4745.911 8213.230 ## Mar 1993 6479.571 5314.640 7644.502 4697.962 8261.179 ## Apr 1993 6479.571 5284.110 7675.032 4651.271 8307.871 ## May 1993 6479.571 5254.340 7704.801 4605.742 8353.399 ## Jun 1993 6479.571 5225.277 7733.864 4561.294 8397.847 ## Jul 1993 6479.571 5196.872 7762.269 4517.853 8441.289 ## Aug 1993 6479.571 5169.083 7790.058 4475.353 8483.789 ## Sep 1993 6479.571 5141.871 7817.271 4433.735 8525.406 ## Oct 1993 6479.571 5115.201 7843.940 4392.948 8566.194 ## Nov 1993 6479.571 5089.043 7870.098 4352.942 8606.199 ## Dec 1993 6479.571 5063.368 7895.773 4313.676 8645.465 # Plot the SES model on steel data autoplot(SES.Steel)+ autolayer(fitted(SES.Steel),series=&quot;Fitted&quot;)+ylab(&quot;US Steel Shipments&quot;) + geom_vline(xintercept = 1992,color=&quot;orange&quot;,linetype=&quot;dashed&quot;) # Computes accuracy statistics for SES model on steel data (training data...NOT validation nor test) round(accuracy(SES.Steel),2) ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 11.44 460.44 363.93 -0.22 5.71 0.83 -0.04 3.2 Holt ESM The Holt model incorporates trend information. So, now there are two components: level and trend. For each component, there will be a smoothing coefficient (or weight). CAREFUL, when you look at parameter estimates, these are NOT the estimates for the mean nor the linear trendyou should be thinking of them as weights (between 0 and 1). The overall form for Holts method is: \\[\\hat{Y}_{t+h}= L_{t}+hT_{t}\\\\ L_{t} = \\theta Y_{t} + (1-\\theta)(L_{t-1}+T_{t-1})\\\\ T_{t} = \\gamma (L_{t}-L_{t-1}) + (1-\\gamma) T_{t-1}\\] For the Holts method, when you forecast, you will see a trending line. # Building a Linear Exponential Smoothing Model - Steel Data # LES.Steel &lt;- holt(SteelShp, initial = &quot;optimal&quot;, h = 24) summary(LES.Steel) ## ## Forecast method: Holt&#39;s method ## ## Model Information: ## Holt&#39;s method ## ## Call: ## holt(y = SteelShp, h = 24, initial = &quot;optimal&quot;) ## ## Smoothing parameters: ## alpha = 0.4329 ## beta = 1e-04 ## ## Initial states: ## l = 6678.9989 ## b = -0.0651 ## ## sigma: 471.4322 ## ## AIC AICc BIC ## 1626.001 1626.667 1638.822 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -4.167318 461.5062 369.9177 -0.4760441 5.818476 0.8423858 ## ACF1 ## Training set -0.03556298 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 1992 6495.463 5891.298 7099.627 5571.472 7419.453 ## Feb 1992 6495.357 5836.979 7153.736 5488.455 7502.260 ## Mar 1992 6495.252 5786.775 7203.730 5411.729 7578.775 ## Apr 1992 6495.147 5739.865 7250.429 5340.043 7650.251 ## May 1992 6495.042 5695.672 7294.412 5272.511 7717.573 ## Jun 1992 6494.937 5653.768 7336.106 5208.479 7781.395 ## Jul 1992 6494.832 5613.826 7375.838 5147.450 7842.214 ## Aug 1992 6494.727 5575.592 7413.861 5089.032 7900.421 ## Sep 1992 6494.622 5538.862 7450.381 5032.914 7956.330 ## Oct 1992 6494.516 5503.468 7485.565 4978.839 8010.194 ## Nov 1992 6494.411 5469.273 7519.549 4926.598 8062.225 ## Dec 1992 6494.306 5436.161 7552.452 4876.013 8112.600 ## Jan 1993 6494.201 5404.033 7584.369 4826.933 8161.470 ## Feb 1993 6494.096 5372.805 7615.387 4779.229 8208.963 ## Mar 1993 6493.991 5342.404 7645.578 4732.791 8255.191 ## Apr 1993 6493.886 5312.767 7675.005 4687.520 8300.252 ## May 1993 6493.781 5283.837 7703.725 4643.331 8344.230 ## Jun 1993 6493.675 5255.565 7731.786 4600.149 8387.202 ## Jul 1993 6493.570 5227.907 7759.234 4557.905 8429.235 ## Aug 1993 6493.465 5200.824 7786.106 4516.541 8470.389 ## Sep 1993 6493.360 5174.281 7812.439 4476.003 8510.718 ## Oct 1993 6493.255 5148.246 7838.264 4436.241 8550.269 ## Nov 1993 6493.150 5122.689 7863.611 4397.211 8589.089 ## Dec 1993 6493.045 5097.585 7888.504 4358.874 8627.216 # Plote the LES model on steel data autoplot(LES.Steel)+ autolayer(fitted(LES.Steel),series=&quot;Fitted&quot;)+labs(title=&quot;US Steel Shipment with Holt forecasts&quot;,y=&quot;US Steel Shipments&quot;) + geom_vline(xintercept = 1992,color=&quot;orange&quot;,linetype=&quot;dashed&quot;) We can also perform Holts method with a damped trend. You will see the formula for the damped trend is similar to the previous Holt formula with an addition of a dampening parameter. \\[\\hat{Y}_{t+h}= L_{t}+\\sum_{i}^{k}\\phi^{i}T_{t}\\\\ L_{t} = \\theta Y_{t} + (1-\\theta)(L_{t-1}+\\phi T_{t-1})\\\\ T_{t} = \\gamma (L_{t}-L_{t-1}) + (1-\\gamma) \\phi T_{t-1}\\] We will illustrate the damped trend on both the Steel and Airline data sets. LDES.Steel &lt;- holt(SteelShp, initial = &quot;optimal&quot;, h = 24, damped = TRUE) summary(LDES.Steel) ## ## Forecast method: Damped Holt&#39;s method ## ## Model Information: ## Damped Holt&#39;s method ## ## Call: ## holt(y = SteelShp, h = 24, damped = TRUE, initial = &quot;optimal&quot;) ## ## Smoothing parameters: ## alpha = 0.4202 ## beta = 1e-04 ## phi = 0.9083 ## ## Initial states: ## l = 6692.5352 ## b = -54.4181 ## ## sigma: 472.702 ## ## AIC AICc BIC ## 1627.468 1628.412 1642.854 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 8.669068 460.2275 367.178 -0.2689588 5.765085 0.836147 -0.02936686 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 1992 6504.538 5898.746 7110.330 5578.059 7431.017 ## Feb 1992 6504.482 5847.350 7161.614 5499.485 7509.479 ## Mar 1992 6504.432 5799.671 7209.192 5426.594 7582.269 ## Apr 1992 6504.386 5755.003 7253.768 5358.304 7650.467 ## May 1992 6504.344 5712.838 7295.850 5293.839 7714.849 ## Jun 1992 6504.306 5672.796 7335.817 5232.621 7775.992 ## Jul 1992 6504.272 5634.585 7373.958 5174.201 7834.342 ## Aug 1992 6504.241 5597.976 7410.505 5118.229 7890.252 ## Sep 1992 6504.212 5562.783 7445.642 5064.420 7944.005 ## Oct 1992 6504.187 5528.852 7479.521 5012.541 7995.832 ## Nov 1992 6504.163 5496.057 7512.269 4962.398 8045.928 ## Dec 1992 6504.142 5464.292 7543.992 4913.829 8094.455 ## Jan 1993 6504.123 5433.465 7574.780 4866.693 8141.552 ## Feb 1993 6504.105 5403.498 7604.712 4820.871 8187.339 ## Mar 1993 6504.089 5374.322 7633.856 4776.260 8231.919 ## Apr 1993 6504.075 5345.879 7662.271 4732.767 8275.383 ## May 1993 6504.062 5318.115 7690.008 4690.313 8317.810 ## Jun 1993 6504.050 5290.985 7717.114 4648.827 8359.272 ## Jul 1993 6504.039 5264.447 7743.631 4608.247 8399.831 ## Aug 1993 6504.029 5238.464 7769.594 4568.514 8439.544 ## Sep 1993 6504.020 5213.002 7795.038 4529.578 8478.462 ## Oct 1993 6504.012 5188.032 7819.992 4491.394 8516.630 ## Nov 1993 6504.005 5163.526 7844.483 4453.919 8554.090 ## Dec 1993 6503.998 5139.459 7868.537 4417.116 8590.880 autoplot(LDES.Steel)+ autolayer(fitted(LDES.Steel),series=&quot;Fitted&quot;)+labs(title=&quot;US Steel Shipment Linear Damped ESM Forecast&quot;) + geom_vline(xintercept = 1992,color=&quot;orange&quot;,linetype=&quot;dashed&quot;) LDES.USAir &lt;- holt(Passenger, initial = &quot;optimal&quot;, h = 24, damped = TRUE) summary(LDES.USAir) ## ## Forecast method: Damped Holt&#39;s method ## ## Model Information: ## Damped Holt&#39;s method ## ## Call: ## holt(y = Passenger, h = 24, damped = TRUE, initial = &quot;optimal&quot;) ## ## Smoothing parameters: ## alpha = 0.5721 ## beta = 1e-04 ## phi = 0.8057 ## ## Initial states: ## l = 36886.1093 ## b = 527.1535 ## ## sigma: 4874.3 ## ## AIC AICc BIC ## 4906.527 4906.924 4926.862 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 196.2283 4818.336 3529.079 -0.2896149 7.191284 1.326257 0.04535328 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Apr 2008 63673.96 57427.30 69920.63 54120.51 73227.42 ## May 2008 63674.11 56477.18 70871.04 52667.35 74680.87 ## Jun 2008 63674.23 55638.45 71710.01 51384.57 75963.89 ## Jul 2008 63674.33 54879.22 72469.44 50223.37 77125.29 ## Aug 2008 63674.41 54180.40 73168.41 49154.58 78194.23 ## Sep 2008 63674.47 53529.54 73819.40 48159.13 79189.80 ## Oct 2008 63674.52 52917.92 74431.12 47223.71 80125.32 ## Nov 2008 63674.56 52339.20 75009.92 46338.63 81010.49 ## Dec 2008 63674.59 51788.59 75560.59 45496.53 81852.66 ## Jan 2009 63674.62 51262.36 76086.88 44691.70 82657.53 ## Feb 2009 63674.64 50757.52 76591.76 43919.61 83429.67 ## Mar 2009 63674.66 50271.67 77077.65 43176.55 84172.76 ## Apr 2009 63674.67 49802.80 77546.54 42459.48 84889.86 ## May 2009 63674.68 49349.27 78000.09 41765.85 85583.51 ## Jun 2009 63674.69 48909.65 78439.73 41093.51 86255.87 ## Jul 2009 63674.70 48482.74 78866.66 40440.60 86908.80 ## Aug 2009 63674.70 48067.49 79281.91 39805.54 87543.87 ## Sep 2009 63674.71 47663.01 79686.40 39186.93 88162.48 ## Oct 2009 63674.71 47268.49 80080.93 38583.57 88765.85 ## Nov 2009 63674.71 46883.24 80466.19 37994.37 89355.06 ## Dec 2009 63674.72 46506.63 80842.80 37418.39 89931.04 ## Jan 2010 63674.72 46138.10 81211.34 36854.78 90494.66 ## Feb 2010 63674.72 45777.16 81572.28 36302.76 91046.68 ## Mar 2010 63674.72 45423.35 81926.09 35761.66 91587.78 autoplot(LDES.USAir)+ autolayer(fitted(LDES.USAir),series=&quot;Fitted&quot;)+labs(title=&quot;US Airline Passengers with Linear Damped ESM Forecast&quot;) + geom_vline(xintercept = 2008.25,color=&quot;orange&quot;,linetype=&quot;dashed&quot;) 3.3 Holt-Winters The Holt-Winters (HW) model has three components to it (level, trend and seasonality). Seasonality is an interesting component to model since we can have an additive seasonal component or a multiplicative seasonal component. Both models are shown below: Additive HW \\[\\hat{Y}_{t+h}= L_{t}+hT_{t} + S_{t-p+h}\\\\ L_{t} = \\theta (Y_{t} - S_{t-p}) + (1-\\theta)(L_{t-1}+T_{t-1})\\\\ T_{t} = \\gamma (L_{t}-L_{t-1}) + (1-\\gamma) T_{t-1}\\\\ S_{t} = \\delta (Y_{t}-L_{t-1}-T_{t-1}) + (1-\\delta) S_{t-p}\\] Multiplicative HW \\[\\hat{Y}_{t+h}= (L_{t}+hT_{t}) S_{t-p+h}\\\\ L_{t} = \\theta \\frac{Y_{t}} {S_{t-p}} + (1-\\theta)(L_{t-1}+T_{t-1})\\\\ T_{t} = \\gamma (L_{t}-L_{t-1}) + (1-\\gamma) T_{t-1}\\\\ S_{t} = \\delta \\frac{Y_{t}}{L_{t-1}+T_{t-1}} + (1-\\delta) S_{t-p}\\] Where p is the frequency of the seasonality (i.e. how many seasons there are within one year). # Building a Holt-Winters ESM - US Airlines Data - Additive Seasonality HWES.USAir &lt;- hw(Passenger, seasonal = &quot;additive&quot;) summary(HWES.USAir) ## ## Forecast method: Holt-Winters&#39; additive method ## ## Model Information: ## Holt-Winters&#39; additive method ## ## Call: ## hw(y = Passenger, seasonal = &quot;additive&quot;) ## ## Smoothing parameters: ## alpha = 0.5967 ## beta = 1e-04 ## gamma = 1e-04 ## ## Initial states: ## l = 38384.1383 ## b = 171.3139 ## s = -1607.408 -2735.133 -266.9438 -4488.589 6259.346 6626.648 ## 4166.006 1369.769 250.523 2806.828 -6741.171 -5639.874 ## ## sigma: 1949.79 ## ## AIC AICc BIC ## 4515.651 4518.696 4573.265 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -84.80235 1877.214 1168.093 -0.2917412 2.495749 0.4389788 ## ACF1 ## Training set 0.06636172 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Apr 2008 65005.38 62506.62 67504.13 61183.86 68826.90 ## May 2008 66294.00 63384.09 69203.92 61843.67 70744.34 ## Jun 2008 69259.75 65989.86 72529.64 64258.88 74260.62 ## Jul 2008 71890.05 68295.96 75484.15 66393.36 77386.74 ## Aug 2008 71692.11 67800.64 75583.59 65740.62 77643.61 ## Sep 2008 61113.61 56945.83 65281.39 54739.54 67487.68 ## Oct 2008 65504.72 61077.76 69931.67 58734.27 72275.16 ## Nov 2008 63206.01 58534.16 67877.87 56061.02 70351.00 ## Dec 2008 64502.98 59598.36 69407.60 57002.01 72003.95 ## Jan 2009 60640.36 55513.46 65767.26 52799.44 68481.28 ## Feb 2009 59708.43 54368.43 65048.44 51541.60 67875.27 ## Mar 2009 69425.67 63880.68 74970.66 60945.34 77906.01 ## Apr 2009 67038.85 61296.05 72781.64 58255.99 75821.70 ## May 2009 68327.47 62393.46 74261.49 59252.18 77402.76 ## Jun 2009 71293.22 65173.90 77412.54 61934.53 80651.91 ## Jul 2009 73923.52 67624.29 80222.75 64289.67 83557.37 ## Aug 2009 73725.58 67251.38 80199.79 63824.14 83627.03 ## Sep 2009 63147.08 56502.45 69791.72 52984.99 73309.17 ## Oct 2009 67538.18 60727.34 74349.03 57121.89 77954.48 ## Nov 2009 65239.48 58266.32 72212.64 54574.96 75904.01 ## Dec 2009 66536.45 59404.62 73668.27 55629.26 77443.63 ## Jan 2010 62673.83 55386.73 69960.92 51529.18 73818.47 ## Feb 2010 61741.90 54302.73 69181.07 50364.67 73119.13 ## Mar 2010 71459.14 63870.89 79047.39 59853.92 83064.36 autoplot(HWES.USAir)+ autolayer(fitted(HWES.USAir),series=&quot;Fitted&quot;)+ylab(&quot;Airlines Passengers&quot;)+ geom_vline(xintercept = 2008.25,color=&quot;orange&quot;,linetype=&quot;dashed&quot;) # Building a Holt-Winters ESM - US Airlines Data - Multiplicative Seasonality HWES.USAir &lt;- hw(Passenger, seasonal = &quot;multiplicative&quot;) summary(HWES.USAir) ## ## Forecast method: Holt-Winters&#39; multiplicative method ## ## Model Information: ## Holt-Winters&#39; multiplicative method ## ## Call: ## hw(y = Passenger, seasonal = &quot;multiplicative&quot;) ## ## Smoothing parameters: ## alpha = 0.4372 ## beta = 1e-04 ## gamma = 0.2075 ## ## Initial states: ## l = 38293.1221 ## b = 173.9926 ## s = 0.9658 0.962 1.0064 0.9745 1.1393 1.0801 ## 1.0368 0.9994 1.0012 1.0401 0.8799 0.9146 ## ## sigma: 0.0381 ## ## AIC AICc BIC ## 4504.228 4507.272 4561.842 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -113.1889 1848.797 1090.105 -0.383246 2.303162 0.4096702 0.1713934 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Apr 2008 65528.49 62329.64 68727.34 60636.28 70420.70 ## May 2008 66821.29 63262.13 70380.46 61378.02 72264.57 ## Jun 2008 70075.52 66056.65 74094.40 63929.19 76221.86 ## Jul 2008 73144.30 68671.62 77616.98 66303.93 79984.68 ## Aug 2008 71313.29 66698.66 75927.92 64255.83 78370.76 ## Sep 2008 58655.19 54662.55 62647.83 52548.97 64761.40 ## Oct 2008 64544.10 59944.79 69143.41 57510.06 71578.13 ## Nov 2008 62554.65 57906.98 67202.32 55446.66 69662.65 ## Dec 2008 63629.25 58716.73 68541.77 56116.20 71142.30 ## Jan 2009 59379.95 54629.79 64130.10 52115.21 66644.68 ## Feb 2009 57852.76 53069.42 62636.10 50537.28 65168.25 ## Mar 2009 70682.78 64655.56 76710.00 61464.94 79900.62 ## Apr 2009 67606.25 61473.18 73739.32 58226.52 76985.97 ## May 2009 68934.51 62519.04 75349.97 59122.89 78746.12 ## Jun 2009 72285.87 65393.58 79178.16 61745.02 82826.72 ## Jul 2009 75445.45 68084.46 82806.44 64187.79 86703.11 ## Aug 2009 73551.02 66215.90 80886.14 62332.92 84769.12 ## Sep 2009 60490.96 54330.83 66651.08 51069.86 69912.06 ## Oct 2009 66558.97 59644.04 73473.89 55983.50 77134.43 ## Nov 2009 64502.39 57671.58 71333.21 54055.56 74949.22 ## Dec 2009 65605.36 58528.93 72681.80 54782.90 76427.83 ## Jan 2010 61219.37 54498.44 67940.31 50940.59 71498.16 ## Feb 2010 59640.30 52980.57 66300.04 49455.12 69825.49 ## Mar 2010 72861.19 64590.90 81131.47 60212.88 85509.49 autoplot(HWES.USAir)+ autolayer(fitted(HWES.USAir),series=&quot;Fitted&quot;)+ylab(&quot;Airlines Passengers&quot;)+ geom_vline(xintercept = 2008.25,color=&quot;orange&quot;,linetype=&quot;dashed&quot;) 3.4 Evaluating forecasts In order to get a better idea of the forecasting properties of the algorithms, it is best to divide your data into a training data set and a test data set. Time series is VERY different than other algorithms in which you have done. The test data set should come at the END of the time series (to truly see how well you can forecast!). An example code is shown below in which the last 12 observations are used as the test data set: # Create training set from overall Airlines Data training=subset(Passenger,end=length(Passenger)-12) # Create test set from overall Airlines Data test=subset(Passenger,start=length(Passenger)-11) # Fit Holt-Winters ESM (multiplicative seasonality) on training data HWES.USAir.train &lt;- hw(training, seasonal = &quot;multiplicative&quot;,initial=&#39;optimal&#39;,h=12) # Calculate prediction errors from forecast error=test-HWES.USAir.train$mean # Calculate prediction error statistics (MAE and MAPE) MAE=mean(abs(error)) MAPE=mean(abs(error)/abs(test)) MAE ## [1] 1134.58 MAPE ## [1] 0.01763593 3.5 ETS You can also allow the computer to search for the best model. The ETS (Error, Trend, Seasonality) algorithm will search for the best model and estimate the parameters. For the error term, we can have either an additive or multiplicative error structure. For the trend, we can have none, additive, multiplicative, damped additive or damped multiplicative . For the seasonal component, we can have none, additive or multiplicative (lots of choices!). An example of how to run this is: ets.passenger&lt;-ets(training) summary(ets.passenger) ## ETS(M,Ad,M) ## ## Call: ## ets(y = training) ## ## Smoothing parameters: ## alpha = 0.6485 ## beta = 1e-04 ## gamma = 1e-04 ## phi = 0.9755 ## ## Initial states: ## l = 38298.6991 ## b = 99.6316 ## s = 0.9696 0.9436 0.9968 0.919 1.1276 1.1289 ## 1.0784 1.0223 1.0025 1.0531 0.8681 0.89 ## ## sigma: 0.0369 ## ## AIC AICc BIC ## 4225.929 4229.567 4285.918 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 157.1888 1747.817 1043.596 0.1980283 2.19083 0.38762 0.008869188 ets.forecast.passenger&lt;-ets.passenger%&gt;%forecast::forecast(h=12) error=mean(abs(test-ets.forecast.passenger$mean)) error ## [1] 1153.042 3.6 Python Code for Exponential Smoothing The following code produces the simple exponential smoothing model in Python and predicts Steel Imports (in tons). import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt steel=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\steel.csv&quot;) df=pd.date_range(start=&#39;1/1/1984&#39;, end=&#39;12/1/1991&#39;, freq=&#39;MS&#39;) steel.index=pd.to_datetime(df) fit = SimpleExpSmoothing(steel[&#39;steelshp&#39;]).fit() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\statsmodels\\tsa\\holtwinters.py:731: RuntimeWarning: invalid value encountered in greater_equal ## loc = initial_p &gt;= ub fit.params[&#39;smoothing_level&#39;] ## 0.4392481570237354 fcast = fit.forecast(24) fcast ## 1992-01-01 6491.065906 ## 1992-02-01 6491.065906 ## 1992-03-01 6491.065906 ## 1992-04-01 6491.065906 ## 1992-05-01 6491.065906 ## 1992-06-01 6491.065906 ## 1992-07-01 6491.065906 ## 1992-08-01 6491.065906 ## 1992-09-01 6491.065906 ## 1992-10-01 6491.065906 ## 1992-11-01 6491.065906 ## 1992-12-01 6491.065906 ## 1993-01-01 6491.065906 ## 1993-02-01 6491.065906 ## 1993-03-01 6491.065906 ## 1993-04-01 6491.065906 ## 1993-05-01 6491.065906 ## 1993-06-01 6491.065906 ## 1993-07-01 6491.065906 ## 1993-08-01 6491.065906 ## 1993-09-01 6491.065906 ## 1993-10-01 6491.065906 ## 1993-11-01 6491.065906 ## 1993-12-01 6491.065906 ## Freq: MS, dtype: float64 plt.plot(steel[&quot;steelshp&quot;],color=&quot;black&quot;) plt.plot(fcast,color=&quot;blue&quot;) plt.show() The Holt models in Python: import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt steel=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\steel.csv&quot;) df=pd.date_range(start=&#39;1/1/1984&#39;, end=&#39;12/1/1991&#39;, freq=&#39;MS&#39;) steel.index=pd.to_datetime(df) fit1 = Holt(steel[&#39;steelshp&#39;]).fit() fit1.summary() Holt Model Results Dep. Variable: endog No. Observations: 96 Model: Holt SSE 20217429.633 Optimized: True AIC 1184.740 Trend: Additive BIC 1194.997 Seasonal: None AICC 1185.684 Seasonal Periods: None Date: Mon, 22 Aug 2022 Box-Cox: False Time: 15:20:36 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4389441 alpha True smoothing_slope 0.000000 beta True initial_level 6282.9434 l.0 True initial_slope 2.1992004 b.0 True fcast1 = fit1.forecast(24) fcast1 ## 1992-01-01 6496.296092 ## 1992-02-01 6498.495293 ## 1992-03-01 6500.694493 ## 1992-04-01 6502.893694 ## 1992-05-01 6505.092894 ## 1992-06-01 6507.292094 ## 1992-07-01 6509.491295 ## 1992-08-01 6511.690495 ## 1992-09-01 6513.889696 ## 1992-10-01 6516.088896 ## 1992-11-01 6518.288096 ## 1992-12-01 6520.487297 ## 1993-01-01 6522.686497 ## 1993-02-01 6524.885698 ## 1993-03-01 6527.084898 ## 1993-04-01 6529.284098 ## 1993-05-01 6531.483299 ## 1993-06-01 6533.682499 ## 1993-07-01 6535.881700 ## 1993-08-01 6538.080900 ## 1993-09-01 6540.280101 ## 1993-10-01 6542.479301 ## 1993-11-01 6544.678501 ## 1993-12-01 6546.877702 ## Freq: MS, dtype: float64 fit2 = Holt(steel[&#39;steelshp&#39;],exponential=True).fit() fit2.summary() Holt Model Results Dep. Variable: endog No. Observations: 96 Model: Holt SSE 20219185.862 Optimized: True AIC 1184.748 Trend: Multiplicative BIC 1195.006 Seasonal: None AICC 1185.692 Seasonal Periods: None Date: Mon, 22 Aug 2022 Box-Cox: False Time: 15:20:36 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4394836 alpha True smoothing_slope 0.000000 beta True initial_level 6289.9550 l.0 True initial_slope 0.9998332 b.0 True fcast2 = fit2.forecast(24) fcast2 ## 1992-01-01 6488.365107 ## 1992-02-01 6487.282975 ## 1992-03-01 6486.201024 ## 1992-04-01 6485.119253 ## 1992-05-01 6484.037663 ## 1992-06-01 6482.956253 ## 1992-07-01 6481.875024 ## 1992-08-01 6480.793974 ## 1992-09-01 6479.713105 ## 1992-10-01 6478.632417 ## 1992-11-01 6477.551908 ## 1992-12-01 6476.471580 ## 1993-01-01 6475.391432 ## 1993-02-01 6474.311464 ## 1993-03-01 6473.231676 ## 1993-04-01 6472.152068 ## 1993-05-01 6471.072641 ## 1993-06-01 6469.993393 ## 1993-07-01 6468.914326 ## 1993-08-01 6467.835438 ## 1993-09-01 6466.756730 ## 1993-10-01 6465.678202 ## 1993-11-01 6464.599854 ## 1993-12-01 6463.521686 ## Freq: MS, dtype: float64 fit3 = Holt(steel[&#39;steelshp&#39;],damped=True).fit() fit3.summary() Holt Model Results Dep. Variable: endog No. Observations: 96 Model: Holt SSE 20076097.042 Optimized: True AIC 1186.066 Trend: Additive BIC 1198.888 Seasonal: None AICC 1187.339 Seasonal Periods: None Date: Mon, 22 Aug 2022 Box-Cox: False Time: 15:20:36 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4426775 alpha True smoothing_slope 0.000000 beta True initial_level 6080.2826 l.0 True initial_slope 205.61155 b.0 True damping_slope 0.5353795 phi True fcast3 = fit3.forecast(24) fcast3 ## 1992-01-01 6488.576993 ## 1992-02-01 6488.576993 ## 1992-03-01 6488.576993 ## 1992-04-01 6488.576993 ## 1992-05-01 6488.576993 ## 1992-06-01 6488.576993 ## 1992-07-01 6488.576993 ## 1992-08-01 6488.576993 ## 1992-09-01 6488.576993 ## 1992-10-01 6488.576993 ## 1992-11-01 6488.576993 ## 1992-12-01 6488.576993 ## 1993-01-01 6488.576993 ## 1993-02-01 6488.576993 ## 1993-03-01 6488.576993 ## 1993-04-01 6488.576993 ## 1993-05-01 6488.576993 ## 1993-06-01 6488.576993 ## 1993-07-01 6488.576993 ## 1993-08-01 6488.576993 ## 1993-09-01 6488.576993 ## 1993-10-01 6488.576993 ## 1993-11-01 6488.576993 ## 1993-12-01 6488.576993 ## Freq: MS, dtype: float64 fit4 = Holt(steel[&#39;steelshp&#39;],exponential=True,damped=True).fit() fit4.summary() Holt Model Results Dep. Variable: endog No. Observations: 96 Model: Holt SSE 20033241.756 Optimized: True AIC 1185.861 Trend: Multiplicative BIC 1198.683 Seasonal: None AICC 1187.134 Seasonal Periods: None Date: Mon, 22 Aug 2022 Box-Cox: False Time: 15:20:36 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4427751 alpha True smoothing_slope 0.000000 beta True initial_level 5979.9999 l.0 True initial_slope 1.0526968 b.0 True damping_slope 0.4735625 phi True fcast4 = fit4.forecast(24) fcast4 ## 1992-01-01 6488.50593 ## 1992-02-01 6488.50593 ## 1992-03-01 6488.50593 ## 1992-04-01 6488.50593 ## 1992-05-01 6488.50593 ## 1992-06-01 6488.50593 ## 1992-07-01 6488.50593 ## 1992-08-01 6488.50593 ## 1992-09-01 6488.50593 ## 1992-10-01 6488.50593 ## 1992-11-01 6488.50593 ## 1992-12-01 6488.50593 ## 1993-01-01 6488.50593 ## 1993-02-01 6488.50593 ## 1993-03-01 6488.50593 ## 1993-04-01 6488.50593 ## 1993-05-01 6488.50593 ## 1993-06-01 6488.50593 ## 1993-07-01 6488.50593 ## 1993-08-01 6488.50593 ## 1993-09-01 6488.50593 ## 1993-10-01 6488.50593 ## 1993-11-01 6488.50593 ## 1993-12-01 6488.50593 ## Freq: MS, dtype: float64 ax=steel.plot(color=&quot;black&quot;,figsize=(12,8)) fcast1.plot(ax=ax,color=&quot;blue&quot;) fcast2.plot(ax=ax,color=&quot;orange&quot;) fcast3.plot(ax=ax,color=&quot;purple&quot;) fcast4.plot(ax=ax,color=&quot;gray&quot;) plt.show() Seasonal models: import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.seasonal import STL usair_p=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\usairlines.csv&quot;) df=pd.date_range(start=&#39;1/1/1990&#39;, end=&#39;3/1/2008&#39;, freq=&#39;MS&#39;) usair_p.index=pd.to_datetime(df) usair_p[&#39;HWES_ADD&#39;] = ExponentialSmoothing(usair_p[&#39;Passengers&#39;],trend=&#39;add&#39;,seasonal=&#39;add&#39;,seasonal_periods=12).fit().fittedvalues ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\statsmodels\\tsa\\holtwinters.py:725: RuntimeWarning: invalid value encountered in less_equal ## loc = initial_p &lt;= lb ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\statsmodels\\tsa\\holtwinters.py:731: RuntimeWarning: invalid value encountered in greater_equal ## loc = initial_p &gt;= ub usair_p[&#39;HWES_MUL&#39;] = ExponentialSmoothing(usair_p[&#39;Passengers&#39;],trend=&#39;mul&#39;,seasonal=&#39;mul&#39;,seasonal_periods=12).fit().fittedvalues usair_p[[&#39;Passengers&#39;,&#39;HWES_ADD&#39;,&#39;HWES_MUL&#39;]].plot(title=&#39;Holt Winters Exponential Smoothing: Additive and Multiplicative Seasonality&#39;) plt.show() fit1=ExponentialSmoothing(usair_p[&#39;Passengers&#39;],trend=&#39;add&#39;,seasonal=&#39;mul&#39;,seasonal_periods=12).fit() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\statsmodels\\tsa\\holtwinters.py:725: RuntimeWarning: invalid value encountered in less_equal ## loc = initial_p &lt;= lb ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\statsmodels\\tsa\\holtwinters.py:731: RuntimeWarning: invalid value encountered in greater_equal ## loc = initial_p &gt;= ub fit1.summary() ExponentialSmoothing Model Results Dep. Variable: endog No. Observations: 219 Model: ExponentialSmoothing SSE 632372040.907 Optimized: True AIC 3289.826 Trend: Additive BIC 3344.051 Seasonal: Multiplicative AICC 3293.246 Seasonal Periods: 12 Date: Mon, 22 Aug 2022 Box-Cox: False Time: 15:20:38 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.6227123 alpha True smoothing_slope 0.0032747 beta True smoothing_seasonal 0.000000 gamma True initial_level 45010.105 l.0 True initial_slope 0.0102971 b.0 True initial_seasons.0 0.7587098 s.0 True initial_seasons.1 0.7406960 s.1 True initial_seasons.2 0.9018018 s.2 True initial_seasons.3 0.8586157 s.3 True initial_seasons.4 0.8766397 s.4 True initial_seasons.5 0.9231765 s.5 True initial_seasons.6 0.9660812 s.6 True initial_seasons.7 0.9558816 s.7 True initial_seasons.8 0.7747387 s.8 True initial_seasons.9 0.8474931 s.9 True initial_seasons.10 0.8080530 s.10 True initial_seasons.11 0.8236796 s.11 True fit2=ExponentialSmoothing(usair_p[&#39;Passengers&#39;],trend=&#39;add&#39;,seasonal=&#39;add&#39;,seasonal_periods=12).fit() fit2.summary() ExponentialSmoothing Model Results Dep. Variable: endog No. Observations: 219 Model: ExponentialSmoothing SSE 779366955.393 Optimized: True AIC 3335.598 Trend: Additive BIC 3389.823 Seasonal: Additive AICC 3339.018 Seasonal Periods: 12 Date: Mon, 22 Aug 2022 Box-Cox: False Time: 15:20:38 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4886167 alpha True smoothing_slope 2.5882e-09 beta True smoothing_seasonal 0.2359358 gamma True initial_level 44992.621 l.0 True initial_slope 132.60863 b.0 True initial_seasons.0 -10634.382 s.0 True initial_seasons.1 -11430.110 s.1 True initial_seasons.2 -4468.8717 s.2 True initial_seasons.3 -6738.8862 s.3 True initial_seasons.4 -6604.9987 s.4 True initial_seasons.5 -4214.4889 s.5 True initial_seasons.6 -2689.8742 s.6 True initial_seasons.7 -484.79161 s.7 True initial_seasons.8 -9405.1624 s.8 True initial_seasons.9 -6707.8316 s.9 True initial_seasons.10 -8821.8270 s.10 True initial_seasons.11 -8323.4613 s.11 True fcast1=fit1.forecast(24) fcast2=fit2.forecast(24) ax=usair_p[&quot;Passengers&quot;].plot(color=&quot;black&quot;,figsize=(12,8)) fcast1.plot(ax=ax,color=&quot;blue&quot;) fcast2.plot(ax=ax,color=&quot;orange&quot;) plt.show() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
