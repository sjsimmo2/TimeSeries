[["exponential-smoothing.html", "Chapter 3 Exponential Smoothing 3.1 Simple Exponential Smoothing 3.2 Holt ESM 3.3 Holt-Winters 3.4 Comparing forecasts 3.5 ETS 3.6 Python Code for Exponential Smoothing 3.7 SAS Code for Exponential Smoothing Models", " Chapter 3 Exponential Smoothing We will now get into our first modeling, which are exponential smoothing models. They have been around for quite some time, but can still be useful if interested in one-step ahead forecasting. In R, we are able to do Simple (or Single) Exponential Smoothing Models, Holt Exponential Smoothing Models and Holt-Winters Exponential Smoothing Models. We will be using the Steel data set and the airline data set to illustrate these models. Each of these are shown below. 3.1 Simple Exponential Smoothing For Simple Exponential Smoothing Models (SES), we have only one component, referred to as the level component. \\[\\hat{Y}_{t+1}= L_{t}\\\\ L_{t} = \\alpha Y_{t} + (1-\\alpha)L_{t-1}\\] This is basically a weighted average with the last observation and the last predicted value. Since this only has a level component, forecasts from SES models will be a horizontal line (hence why this method is called “one-step ahead” forecasting). Before modeling, be sure to divide your data into a training, validation and test (or at least training and test). The below code illustrates the Simple (Single) Exponential Smoothing Model. # Building a Single Exponential Smoothing (SES) Model - Steel Data # Steel &lt;- Steel |&gt; mutate(date = seq(ymd(&#39;1932-07-01&#39;),ymd(&#39;1980-01-01&#39;),by=&#39;6 months&#39;)) steel_ts&lt;-Steel |&gt; mutate(Month=yearmonth(date)) |&gt; as_tsibble(index=Month) steel_train &lt;-steel_ts |&gt; filter(year(date) &lt;= 1975) SES.Steel &lt;- steel_train |&gt; model(ETS(steelshp ~ error(&quot;A&quot;) + trend(&quot;N&quot;) + season(&quot;N&quot;))) Steel.for &lt;- SES.Steel |&gt; fabletools::forecast(h = 9) report(SES.Steel) ## Series: steelshp ## Model: ETS(A,N,N) ## Smoothing parameters: ## alpha = 0.466543 ## ## Initial states: ## l[0] ## 6269.498 ## ## sigma^2: 214894.3 ## ## AIC AICc BIC ## 1460.688 1460.977 1468.086 # Plot the SES model on steel data Steel.for |&gt; autoplot(steel_ts) + geom_line(aes(y = .fitted), col=&quot;#D55E00&quot;, data = augment(SES.Steel)) + labs(y=&quot;Steel Exports&quot;, title=&quot;Steel Exports&quot;) + guides(colour = &quot;none&quot;) # To get fitted values for training data set: Steel_fitted &lt;-fitted(SES.Steel)$.fitted # To get fitted values for test data set: Steel_test &lt;- Steel.for$.mean # Computes accuracy statistics for SES model on steel data (test data) fabletools::accuracy(Steel.for, steel_ts) ## # A tibble: 1 × 10 ## .model .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &quot;ETS(steelshp ~ error… Test 468. 599. 486. 6.75 7.04 1.17 1.13 -0.0500 3.2 Holt ESM The Holt model incorporates trend information. So, now there are two components: level and trend. For each component, there will be a smoothing coefficient (or weight). CAREFUL, when you look at parameter estimates, these are NOT the estimates for the mean nor the linear trend…you should be thinking of them as weights (between 0 and 1). The overall form for Holt’s method is: \\[\\hat{Y}_{t+h}= L_{t}+hT_{t}\\\\ L_{t} = \\alpha Y_{t} + (1-\\alpha)(L_{t-1}+T_{t-1})\\\\ T_{t} = \\beta (L_{t}-L_{t-1}) + (1-\\beta) T_{t-1}\\] For the Holt’s method, when you forecast, you will see a trending line. # Building a Linear Exponential Smoothing Model - US Airlines Data # USAirlines_ts &lt;- USAirlines |&gt; mutate(date=myd(paste(Month, Year, &quot;1&quot;))) |&gt; mutate(Month2=yearmonth(date)) |&gt; as_tsibble(index=Month2) air_train &lt;-USAirlines_ts |&gt; filter(year(date) &lt;= 2005) LES.air &lt;- air_train |&gt; model(ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;A&quot;) + season(&quot;N&quot;))) air.for &lt;- LES.air |&gt; fabletools::forecast(h = 27) report(LES.air) ## Series: Passengers ## Model: ETS(A,A,N) ## Smoothing parameters: ## alpha = 0.5860139 ## beta = 0.003740218 ## ## Initial states: ## l[0] b[0] ## 37303.09 526.6595 ## ## sigma^2: 23188824 ## ## AIC AICc BIC ## 4271.560 4271.882 4287.847 # Plot the data air.for |&gt; autoplot(USAirlines_ts) + geom_line(aes(y = .fitted), col=&quot;#D55E00&quot;, data = augment(LES.air)) + labs(y=&quot;Passengers&quot;, title=&quot;US Airline Passengers&quot;) + guides(colour = &quot;none&quot;) We can also perform Holt’s method with a damped trend. You will see the formula for the damped trend is similar to the previous Holt formula with an addition of a dampening parameter. \\[\\hat{Y}_{t+h}= L_{t}+\\sum_{i}^{k}\\phi^{i}T_{t}\\\\ L_{t} = \\alpha Y_{t} + (1-\\alpha)(L_{t-1}+\\phi T_{t-1})\\\\ T_{t} = \\beta (L_{t}-L_{t-1}) + (1-\\beta) \\phi T_{t-1}\\] We will illustrate the damped trend on the Airline data set. LdES.air &lt;- air_train |&gt; model(ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;Ad&quot;) + season(&quot;N&quot;))) air.for &lt;- LdES.air |&gt; fabletools::forecast(h = 27) report(LdES.air) ## Series: Passengers ## Model: ETS(A,Ad,N) ## Smoothing parameters: ## alpha = 0.5705768 ## beta = 0.0001003564 ## phi = 0.8085131 ## ## Initial states: ## l[0] b[0] ## 36885.52 526.5046 ## ## sigma^2: 23007825 ## ## AIC AICc BIC ## 4271.031 4271.485 4290.576 # Plot the data air.for |&gt; autoplot(USAirlines_ts) + geom_line(aes(y = .fitted), col=&quot;#D55E00&quot;, data = augment(LdES.air)) + labs(y=&quot;Passengers&quot;, title=&quot;US Airline Passengers&quot;) + guides(colour = &quot;none&quot;) 3.3 Holt-Winters The Holt-Winters (HW) model has three components to it (level, trend and seasonality). Seasonality is an interesting component to model since we can have an additive seasonal component or a multiplicative seasonal component. Both models are shown below: Additive HW \\[\\hat{Y}_{t+h}= L_{t}+hT_{t} + S_{t-p+h}\\\\ L_{t} = \\alpha (Y_{t} - S_{t-p}) + (1-\\alpha)(L_{t-1}+T_{t-1})\\\\ T_{t} = \\beta (L_{t}-L_{t-1}) + (1-\\beta) T_{t-1}\\\\ S_{t} = \\gamma (Y_{t}-L_{t-1}-T_{t-1}) + (1-\\gamma) S_{t-p}\\] Multiplicative HW \\[\\hat{Y}_{t+h}= (L_{t}+hT_{t}) S_{t-p+h}\\\\ L_{t} = \\alpha \\frac{Y_{t}} {S_{t-p}} + (1-\\alpha)(L_{t-1}+T_{t-1})\\\\ T_{t} = \\beta (L_{t}-L_{t-1}) + (1-\\beta) T_{t-1}\\\\ S_{t} = \\gamma \\frac{Y_{t}}{L_{t-1}+T_{t-1}} + (1-\\gamma) S_{t-p}\\] Where p is the frequency of the seasonality (i.e. how many “seasons” there are within one year). # Building a Holt-Winters ESM - US Airlines Data - Additive Seasonality HWadd.air &lt;- air_train |&gt; model(ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;A&quot;) + season(&quot;A&quot;))) air.for &lt;- HWadd.air |&gt; fabletools::forecast(h = 27) report(HWadd.air) ## Series: Passengers ## Model: ETS(A,A,A) ## Smoothing parameters: ## alpha = 0.5913618 ## beta = 0.0001002723 ## gamma = 0.0001000455 ## ## Initial states: ## l[0] b[0] s[0] s[-1] s[-2] s[-3] s[-4] s[-5] ## 38409 159.5944 -1520.744 -2728.928 -117.3477 -4305.732 6420.735 6299.852 ## s[-6] s[-7] s[-8] s[-9] s[-10] s[-11] ## 4002.381 1210.882 122.2352 2660.169 -6471.051 -5572.452 ## ## sigma^2: 4099578 ## ## AIC AICc BIC ## 3950.201 3953.718 4005.578 # Plot the data air.for |&gt; autoplot(USAirlines_ts) + geom_line(aes(y = .fitted), col=&quot;#D55E00&quot;, data = augment(HWadd.air)) + labs(y=&quot;Passengers&quot;, title=&quot;US Airline Passengers&quot;) + guides(colour = &quot;none&quot;) ### Multiplicative model HWmult.air &lt;- air_train |&gt; model(ETS(Passengers ~ error(&quot;M&quot;) + trend(&quot;A&quot;) + season(&quot;M&quot;))) air.for &lt;- HWmult.air |&gt; fabletools::forecast(h = 27) report(HWmult.air) ## Series: Passengers ## Model: ETS(M,A,M) ## Smoothing parameters: ## alpha = 0.5132388 ## beta = 0.006772624 ## gamma = 0.0614166 ## ## Initial states: ## l[0] b[0] s[0] s[-1] s[-2] s[-3] s[-4] s[-5] ## 38328.12 132.2916 0.9879613 0.9516784 1.015964 0.9248462 1.127338 1.111153 ## s[-6] s[-7] s[-8] s[-9] s[-10] s[-11] ## 1.063682 1.012367 0.9931891 1.041972 0.8832477 0.8866022 ## ## sigma^2: 0.0015 ## ## AIC AICc BIC ## 3922.549 3926.066 3977.926 # Plot the data air.for |&gt; autoplot(USAirlines_ts) + geom_line(aes(y = .fitted), col=&quot;#D55E00&quot;, data = augment(HWmult.air)) + labs(y=&quot;Passengers&quot;, title=&quot;US Airline Passengers&quot;) + guides(colour = &quot;none&quot;) 3.4 Comparing forecasts This should be done on the validation data set (test data should ONLY be used ONCE…at the very end). air_fit &lt;- air_train |&gt; model( SES = ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;N&quot;) + season(&quot;N&quot;)), `Linear` = ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;A&quot;) + season(&quot;N&quot;)), `Damped Linear` = ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;Ad&quot;) + season(&quot;N&quot;)), HWAdd = ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;A&quot;) + season(&quot;A&quot;)), HWMult = ETS(Passengers ~ error(&quot;M&quot;) + trend(&quot;A&quot;) + season(&quot;M&quot;)) ) air_fc &lt;- air_fit |&gt; fabletools::forecast(h = 27) fabletools::accuracy(air_fc, USAirlines_ts) ## # A tibble: 5 × 10 ## .model .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Damped Linear Test 3351. 6251. 5238. 4.65 8.06 1.84 1.69 0.382 ## 2 HWAdd Test -175. 1462. 1259. -0.421 2.02 0.443 0.395 0.448 ## 3 HWMult Test 467. 1319. 1110. 0.705 1.75 0.391 0.356 0.219 ## 4 Linear Test -67.3 5345. 4736. -0.789 7.62 1.67 1.44 0.436 ## 5 SES Test 3346. 6248. 5236. 4.64 8.05 1.84 1.69 0.382 Based upone this information, which model would you choose? 3.5 ETS You can also allow the computer to search for the best model. The ETS (Error, Trend, Seasonality) algorithm will search for the best model and estimate the parameters. For the error term, we can have either an additive or multiplicative error structure. For the trend, we can have none, additive, or damped additive . For the seasonal component, we can have none, additive or multiplicative (lots of choices!). An example of how to run this is: air_auto &lt;- air_train |&gt; model(ETS(Passengers)) report(air_auto) ## Series: Passengers ## Model: ETS(M,Ad,M) ## Smoothing parameters: ## alpha = 0.6388447 ## beta = 0.0001026043 ## gamma = 0.0001060611 ## phi = 0.979993 ## ## Initial states: ## l[0] b[0] s[0] s[-1] s[-2] s[-3] s[-4] s[-5] ## 38326.08 97.13345 0.9672127 0.9438917 0.9983376 0.9209977 1.132478 1.132414 ## s[-6] s[-7] s[-8] s[-9] s[-10] s[-11] ## 1.079442 1.022098 1.000804 1.051137 0.8657376 0.8854499 ## ## sigma^2: 0.0014 ## ## AIC AICc BIC ## 3910.149 3914.103 3968.784 # Now compare this to the HW models: air_fit &lt;- air_train |&gt; model( HWAdd = ETS(Passengers ~ error(&quot;A&quot;) + trend(&quot;A&quot;) + season(&quot;A&quot;)), HWMult = ETS(Passengers ~ error(&quot;M&quot;) + trend(&quot;A&quot;) + season(&quot;M&quot;)), AutoETS = ETS(Passengers ~ error(&quot;M&quot;) + trend(&quot;Ad&quot;) + season(&quot;M&quot;)) ) air_fc &lt;- air_fit |&gt; fabletools::forecast(h = 27) fabletools::accuracy(air_fc, USAirlines_ts) ## # A tibble: 3 × 10 ## .model .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AutoETS Test 1734. 2343. 2020. 2.75 3.19 0.711 0.633 0.596 ## 2 HWAdd Test -175. 1462. 1259. -0.421 2.02 0.443 0.395 0.448 ## 3 HWMult Test 467. 1319. 1110. 0.705 1.75 0.391 0.356 0.219 ### Can change to bic air_auto2 &lt;- air_train |&gt; model(ETS(Passengers, ic =&quot;bic&quot;)) report(air_auto2) ## Series: Passengers ## Model: ETS(M,N,M) ## Smoothing parameters: ## alpha = 0.7358545 ## gamma = 0.001388497 ## ## Initial states: ## l[0] s[0] s[-1] s[-2] s[-3] s[-4] s[-5] s[-6] ## 41491.07 0.9705455 0.9480705 0.9988812 0.9158342 1.119004 1.126052 1.073332 ## s[-7] s[-8] s[-9] s[-10] s[-11] ## 1.022722 1.003232 1.057297 0.8713743 0.8936557 ## ## sigma^2: 0.0015 ## ## AIC AICc BIC ## 3912.504 3915.231 3961.366 3.6 Python Code for Exponential Smoothing The following Python codes will produce exponential smoothing models. The exponential smoothing models are using an older version in statsmodels (a new format is in statsforecast). import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from statsforecast.models import ETS from statsforecast import StatsForecast from statsforecast.utils import AirPassengers from statsmodels.tsa.tsatools import detrend from sklearn.metrics import mean_squared_error from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt steel=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\steel.csv&quot;) df = pd.date_range(start=&#39;1932-07-01&#39;, end=&#39;1980-07-01&#39;, freq=&#39;6ME&#39;) steel.index=pd.to_datetime(df) steel_train=steel.head(87) steel_test = steel.tail(9) fit = SimpleExpSmoothing(steel_train[&#39;steelshp&#39;]).fit() fit.params[&#39;smoothing_level&#39;] ## 0.4664238093532132 fcast = fit.forecast(9) fcast ## 1976-01-31 6198.30587 ## 1976-07-31 6198.30587 ## 1977-01-31 6198.30587 ## 1977-07-31 6198.30587 ## 1978-01-31 6198.30587 ## 1978-07-31 6198.30587 ## 1979-01-31 6198.30587 ## 1979-07-31 6198.30587 ## 1980-01-31 6198.30587 ## Freq: 6ME, dtype: float64 plt.plot(steel_train[&quot;steelshp&quot;],color=&quot;black&quot;) plt.plot(fcast,color=&quot;blue&quot;) plt.show() The Holt models in Python: fit1 = Holt(steel_train[&#39;steelshp&#39;]).fit() fit1.summary() Holt Model Results Dep. Variable: steelshp No. Observations: 87 Model: Holt SSE 19512718.035 Optimized: True AIC 1079.898 Trend: Additive BIC 1089.762 Seasonal: None AICC 1080.948 Seasonal Periods: None Date: Thu, 15 Aug 2024 Box-Cox: False Time: 12:12:39 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.5430284 alpha True smoothing_trend 0.0821604 beta True initial_level 5992.3106 l.0 True initial_trend -39.011692 b.0 True fcast1 = fit1.forecast(9) fcast1 ## 1976-01-31 6036.814543 ## 1976-07-31 5970.112066 ## 1977-01-31 5903.409589 ## 1977-07-31 5836.707112 ## 1978-01-31 5770.004635 ## 1978-07-31 5703.302158 ## 1979-01-31 5636.599681 ## 1979-07-31 5569.897204 ## 1980-01-31 5503.194727 ## Freq: 6ME, dtype: float64 fit2 = Holt(steel_train[&#39;steelshp&#39;],exponential=True).fit() ## C:\\PROGRA~3\\ANACON~1\\envs\\R_Env2\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:915: ConvergenceWarning: Optimization failed to converge. Check mle_retvals. ## warnings.warn( fit2.summary() Holt Model Results Dep. Variable: steelshp No. Observations: 87 Model: Holt SSE 20441975.260 Optimized: True AIC 1083.946 Trend: Multiplicative BIC 1093.809 Seasonal: None AICC 1084.996 Seasonal Periods: None Date: Thu, 15 Aug 2024 Box-Cox: False Time: 12:12:39 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.5471429 alpha True smoothing_trend 0.0705991 beta True initial_level 5980.0000 l.0 True initial_trend 1.0284281 b.0 True fcast2 = fit2.forecast(9) fcast2 ## 1976-01-31 6064.909101 ## 1976-07-31 6017.661547 ## 1977-01-31 5970.782067 ## 1977-07-31 5924.267792 ## 1978-01-31 5878.115878 ## 1978-07-31 5832.323502 ## 1979-01-31 5786.887863 ## 1979-07-31 5741.806182 ## 1980-01-31 5697.075702 ## Freq: 6ME, dtype: float64 fit3 = Holt(steel_train[&#39;steelshp&#39;],damped=True).fit() ## &lt;string&gt;:1: FutureWarning: the &#39;damped&#39; keyword is deprecated, use &#39;damped_trend&#39; instead. fit3.summary() Holt Model Results Dep. Variable: steelshp No. Observations: 87 Model: Holt SSE 18715743.199 Optimized: True AIC 1078.270 Trend: Additive BIC 1090.600 Seasonal: None AICC 1079.688 Seasonal Periods: None Date: Thu, 15 Aug 2024 Box-Cox: False Time: 12:12:39 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4851218 alpha True smoothing_trend 0.0417095 beta True initial_level 6259.5945 l.0 True initial_trend 10.189748 b.0 True damping_trend 0.9710694 phi True fcast3 = fit3.forecast(9) fcast3 ## 1976-01-31 6136.055442 ## 1976-07-31 6106.850781 ## 1977-01-31 6078.491030 ## 1977-07-31 6050.951744 ## 1978-01-31 6024.209187 ## 1978-07-31 5998.240309 ## 1979-01-31 5973.022727 ## 1979-07-31 5948.534705 ## 1980-01-31 5924.755137 ## Freq: 6ME, dtype: float64 fit4 = Holt(steel_train[&#39;steelshp&#39;],exponential=True,damped=True).fit() ## &lt;string&gt;:1: FutureWarning: the &#39;damped&#39; keyword is deprecated, use &#39;damped_trend&#39; instead. ## C:\\PROGRA~3\\ANACON~1\\envs\\R_Env2\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:83: RuntimeWarning: overflow encountered in matmul ## return err.T @ err fit4.summary() Holt Model Results Dep. Variable: steelshp No. Observations: 87 Model: Holt SSE 19184543.322 Optimized: True AIC 1080.423 Trend: Multiplicative BIC 1092.752 Seasonal: None AICC 1081.840 Seasonal Periods: None Date: Thu, 15 Aug 2024 Box-Cox: False Time: 12:12:39 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.5269222 alpha True smoothing_trend 0.0654773 beta True initial_level 6009.5254 l.0 True initial_trend 0.9982269 b.0 True damping_trend 0.9829782 phi True fcast4 = fit4.forecast(9) fcast4 ## 1976-01-31 6082.733658 ## 1976-07-31 6039.706005 ## 1977-01-31 5997.707411 ## 1977-07-31 5956.708353 ## 1978-01-31 5916.680330 ## 1978-07-31 5877.595817 ## 1979-01-31 5839.428234 ## 1979-07-31 5802.151898 ## 1980-01-31 5765.741996 ## Freq: 6ME, dtype: float64 ax=steel_train.plot(color=&quot;black&quot;,figsize=(12,8)) fcast1.plot(ax=ax,color=&quot;blue&quot;) fcast2.plot(ax=ax,color=&quot;orange&quot;) fcast3.plot(ax=ax,color=&quot;purple&quot;) fcast4.plot(ax=ax,color=&quot;gray&quot;) steel_test.plot(ax=ax,color=&quot;red&quot;) plt.show() Seasonal models in Python: import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.seasonal import STL usair_p=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\usairlines.csv&quot;) df=pd.date_range(start=&#39;1/1/1990&#39;, end=&#39;3/1/2008&#39;, freq=&#39;MS&#39;) usair_p.index=pd.to_datetime(df) usair_train = usair_p.head(192) usair_test = usair_p.tail(27) #### Caution!!!!! These did not converge!!! Would NOT recommend using them! usair_train[&#39;HWES_ADD&#39;] = ExponentialSmoothing(usair_train[&#39;Passengers&#39;],trend=&#39;add&#39;,seasonal=&#39;add&#39;,seasonal_periods=12).fit().fittedvalues ## C:\\PROGRA~3\\ANACON~1\\envs\\R_Env2\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:915: ConvergenceWarning: Optimization failed to converge. Check mle_retvals. ## warnings.warn( ## &lt;string&gt;:4: SettingWithCopyWarning: ## A value is trying to be set on a copy of a slice from a DataFrame. ## Try using .loc[row_indexer,col_indexer] = value instead ## ## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy usair_train[&#39;HWES_MUL&#39;] = ExponentialSmoothing(usair_train[&#39;Passengers&#39;],trend=&#39;mul&#39;,seasonal=&#39;mul&#39;,seasonal_periods=12).fit().fittedvalues ## C:\\PROGRA~3\\ANACON~1\\envs\\R_Env2\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:915: ConvergenceWarning: Optimization failed to converge. Check mle_retvals. ## warnings.warn( ## &lt;string&gt;:2: SettingWithCopyWarning: ## A value is trying to be set on a copy of a slice from a DataFrame. ## Try using .loc[row_indexer,col_indexer] = value instead ## ## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy usair_train[[&#39;Passengers&#39;,&#39;HWES_ADD&#39;,&#39;HWES_MUL&#39;]].plot(title=&#39;Holt Winters Exponential Smoothing: Additive and Multiplicative Seasonality&#39;) plt.show() fit1=ExponentialSmoothing(usair_train[&#39;Passengers&#39;],trend=&#39;add&#39;,seasonal=&#39;mul&#39;,seasonal_periods=12).fit() ## C:\\PROGRA~3\\ANACON~1\\envs\\R_Env2\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:915: ConvergenceWarning: Optimization failed to converge. Check mle_retvals. ## warnings.warn( fit1.summary() ExponentialSmoothing Model Results Dep. Variable: Passengers No. Observations: 192 Model: ExponentialSmoothing SSE 776185668.189 Optimized: True AIC 2952.782 Trend: Additive BIC 3004.902 Seasonal: Multiplicative AICC 2956.736 Seasonal Periods: 12 Date: Thu, 15 Aug 2024 Box-Cox: False Time: 12:12:42 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.3939286 alpha True smoothing_trend 0.0218849 beta True smoothing_seasonal 0.2754870 gamma True initial_level 38232.794 l.0 True initial_trend -95.864899 b.0 True initial_seasons.0 0.8828055 s.0 True initial_seasons.1 0.8473624 s.1 True initial_seasons.2 1.0108916 s.2 True initial_seasons.3 0.9777503 s.3 True initial_seasons.4 1.0088677 s.4 True initial_seasons.5 1.0761260 s.5 True initial_seasons.6 1.1385855 s.6 True initial_seasons.7 1.1824059 s.7 True initial_seasons.8 0.9607449 s.8 True initial_seasons.9 1.0081718 s.9 True initial_seasons.10 0.9385590 s.10 True initial_seasons.11 0.9677292 s.11 True fit2=ExponentialSmoothing(usair_train[&#39;Passengers&#39;],trend=&#39;add&#39;,seasonal=&#39;add&#39;,seasonal_periods=12).fit() ## C:\\PROGRA~3\\ANACON~1\\envs\\R_Env2\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:915: ConvergenceWarning: Optimization failed to converge. Check mle_retvals. ## warnings.warn( fit2.summary() ExponentialSmoothing Model Results Dep. Variable: Passengers No. Observations: 192 Model: ExponentialSmoothing SSE 786859595.372 Optimized: True AIC 2955.404 Trend: Additive BIC 3007.524 Seasonal: Additive AICC 2959.358 Seasonal Periods: 12 Date: Thu, 15 Aug 2024 Box-Cox: False Time: 12:12:42 Box-Cox Coeff.: None coeff code optimized smoothing_level 0.4292857 alpha True smoothing_trend 0.0225940 beta True smoothing_seasonal 0.2989456 gamma True initial_level 38232.794 l.0 True initial_trend -95.864899 b.0 True initial_seasons.0 -4632.4028 s.0 True initial_seasons.1 -6032.6319 s.1 True initial_seasons.2 494.52431 s.2 True initial_seasons.3 -873.71528 s.3 True initial_seasons.4 368.01389 s.4 True initial_seasons.5 3047.9618 s.5 True initial_seasons.6 5402.8993 s.6 True initial_seasons.7 7100.5243 s.7 True initial_seasons.8 -1505.9653 s.8 True initial_seasons.9 325.04514 s.9 True initial_seasons.10 -2405.4861 s.10 True initial_seasons.11 -1288.7674 s.11 True fcast1=fit1.forecast(27) fcast2=fit2.forecast(27) ax=usair_train[&quot;Passengers&quot;].plot(color=&quot;black&quot;,figsize=(12,8)) fcast1.plot(ax=ax,color=&quot;blue&quot;) fcast2.plot(ax=ax,color=&quot;orange&quot;) usair_test[&quot;Passengers&quot;].plot(ax=ax,color = &quot;red&quot;) plt.show() error=usair_test[&#39;Passengers&#39;]-fcast1 MAE=np.mean(abs(error)) MAE ## 951.5467587577447 MAPE=np.mean(abs(error)/usair_test[&#39;Passengers&#39;]) MAPE ## 0.01522735714071667 3.7 SAS Code for Exponential Smoothing Models The following code is for Exponential Smoothing models in SAS. Create library for data sets libname Time ‘Q:Drive - Time Series’; run; SIMPLE EXPONENTIAL SMOOTHING MODEL Create a simple exponential smoothing model proc esm data=Time.Steel print=all plot=all lead=24; forecast steelshp / model=simple; run; Create a simple exponential smoothing model with ID statement   proc esm data=Time.USAirlines print=all plot=all lead=24;   id date interval=month;   forecast Passengers / model=simple;   run;   LINEAR TREND FOR EXPONENTIAL SMOOTHING   Double exponential smoothing   proc esm data=Time.Steel print=all plot=all lead=24;   forecast steelshp / model=double;   run;   linear exponential smoothing   proc esm data=Time.Steel print=all plot=all lead=24;   forecast steelshp / model=linear;   run;   damped trend exponential smoothing   proc esm data=Time.Steel print=all plot=all lead=24;   forecast steelshp / model=damptrend;   run;   linear exponential smoothign with interval = month   proc esm data=Time.USAirlines print=all plot=all lead=24;   id date interval=month;   forecast Passengers / model=linear;   run;   SEASONAL EXPONENTIAL SMOOTHING MODEL   Additive seasonal exponential smoothing model   proc esm data=Time.USAirlines print=all plot=all   seasonality=12 lead=24 outfor=test1;   forecast Passengers / model=addseasonal;   run;   mulitplicative seasonal exponential smoothing model   proc esm data=Time.USAirlines print=all plot=all   seasonality=12 lead=24;   forecast Passengers / model=multseasonal;   run;   Winters additive exponential smoothing model (includes trend)   proc esm data=Time.USAirlines print=all plot=all   seasonality=12 lead=24;   forecast Passengers / model=addwinters;   run;   Winters multiplicative exponential smoothing model (includes trend) (Lead = 24)   proc esm data=Time.USAirlines print=all plot=all   seasonality=12 lead=24;   forecast Passengers / model=multwinters;   run;   Winters multiplicative exponential smoothing model (includes trend) Lead = 12   proc esm data=Time.USAirlines print=all plot=all lead=12   back=12 seasonality=12;   forecast Passengers / model=multwinters;   run;   EXPLORATION of SEASONAL EXPONENTIAL SMOOTHING MODEL   Winters multiplicative exponential smoothing model (includes trend) Lead = 12, uses outfor statement to output forecasts   proc esm data=Time.USAirlines print=all plot=all seasonality=12 lead=12 back=12 outfor=test;   forecast Passengers / model=multwinters;   run;   calculate |error|/|actual value|   data test2;   set test;   if TIMEID&gt;207;   abs_error=abs(error);   abs_err_obs=abs_error/abs(actual);   run;   mean of |error|/|actual value| for this forecast   proc means data=test2 mean;   var abs_error abs_err_obs;   run; "]]
