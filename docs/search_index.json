[["arima.html", "Chapter 4 ARIMA 4.1 Stationarity 4.2 Correlation Functions 4.3 AutoRegressive Models (AR) 4.4 Moving Average model (MA) 4.5 White noise 4.6 Python Code for ARMA/ARIMA models 4.7 SAS Code for ARMA/ARIMA", " Chapter 4 ARIMA We will now be switching over to doing ARMA/ARIMA models!! There are a number of different concepts you will need in order to do this type of modeling. 4.1 Stationarity Before we can try to model the dependency structure (the AR and MA terms), we must first have a stationary series! The ADF test is one of the most well-known and accepted test for testing stationarity. However, others have also been proposed. Within this document, we will be using the KPSS test. Quotes.ts&lt;-Quotes |&gt; mutate(date = seq(ymd(&#39;2002-01-01&#39;),ymd(&#39;2005-04-21&#39;),by=&#39;months&#39;)) |&gt; mutate(month=yearmonth(date)) |&gt; as_tsibble(index=month) Quotes_train&lt;-Quotes.ts %&gt;% filter(year(date)&lt;2005) autoplot(Quotes_train,Quotes)+labs(title=&quot;Time Series of Monthly Stock quotes&quot;, x=&quot;Time&quot;, y=&quot;Quotes&quot;) The following code looks into stationarity. # Perform the KPSS test Quotes_train |&gt; features(Quotes, unitroot_kpss) ## # A tibble: 1 × 2 ## kpss_stat kpss_pvalue ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.197 0.1 Quotes_train |&gt; features(Quotes, unitroot_ndiffs) ## # A tibble: 1 × 1 ## ndiffs ## &lt;int&gt; ## 1 0 4.2 Correlation Functions The Acf and the Pacf in R will calculate the autocorrelation (up to the lag you specify) and the partial autocorrelation, respectively. ggAcf(Quotes_train$Quotes,lag=10) ggPacf(Quotes_train$Quotes,lag=10) Hurricane.ts&lt;- hurricane %&gt;% as_tsibble(index=Year) Hurricane_train &lt;-Hurricane.ts %&gt;% filter(Year &lt;2000) autoplot(Hurricane_train,MeanVMax)+labs(title=&quot;Time Series of Yearly Mean Velocity for Hurricanes&quot;, x=&quot;Time&quot;, y=&quot;MPH&quot;) Hurricane_train %&gt;% features(MeanVMax,unitroot_ndiffs) ## # A tibble: 1 × 1 ## ndiffs ## &lt;int&gt; ## 1 1 Hurricane_train &lt;- Hurricane_train %&gt;% mutate(mean_diff=difference(MeanVMax)) Hurricane_train %&gt;% features(mean_diff,unitroot_ndiffs) ## # A tibble: 1 × 1 ## ndiffs ## &lt;int&gt; ## 1 0 autoplot(Hurricane_train,mean_diff)+labs(title=&quot;Differenced Mean Max Velocity&quot;, x=&quot;Time&quot;, y=&quot;Difference&quot;) ## Warning: Removed 1 row containing missing values or values outside the scale range ## (`geom_line()`). 4.3 AutoRegressive Models (AR) AutoRegressive (AR) models involve modeling the lags of Y. We can write an autoregressive model as \\[ Y_{t} = c + \\phi_{1}Y_{t-1}+\\phi_{2}Y_{t-2}+...\\phi_{p}Y_{t-p}+\\epsilon_{t} \\] Where there are p lags of Y. Below is the code to fit an AR(2) model. The order in the Arima function needs the p,d,q values (p=# of AR terms, d=how many differences should be taken and q=# of MA terms). ggAcf(Y[1:731,]) ggPacf(Y[1:731,]) Y.1 &lt;-data.frame(Y) Y.ts&lt;-Y.1 %&gt;% mutate(date = seq(ymd(&#39;2000-01-01&#39;),ymd(&#39;2002-9-26&#39;),by=&#39;day&#39;)) %&gt;% as_tsibble(index=date) Y_train &lt;- Y.ts %&gt;% filter(year(date)&lt;2002) autoplot(Y_train,Y)+labs(title=&quot;Time Series of Simulated Daily series&quot;, x=&quot;Time&quot;, y=&quot;Values&quot;) Y.ARIMA &lt;- Y_train %&gt;% model(ARIMA(Y~pdq(2,0,0)+PDQ(0,0,0))) report(Y.ARIMA) ## Series: Y ## Model: ARIMA(2,0,0) ## ## Coefficients: ## ar1 ar2 ## 0.6399 -0.3838 ## s.e. 0.0342 0.0342 ## ## sigma^2 estimated as 93.75: log likelihood=-2696.14 ## AIC=5398.28 AICc=5398.32 BIC=5412.07 Y.ARIMA %&gt;% residuals() %&gt;% ggAcf() Y.ARIMA %&gt;% residuals() %&gt;% ggPacf() 4.4 Moving Average model (MA) Moving average (MA) models involve modeling the lags of the error. We can write a moving average model as \\[ Y_{t} = c - \\theta_{1}\\epsilon_{t-1}-\\theta_{2}\\epsilon_{t-2}-...\\theta_{q}\\epsilon_{t-q}+\\epsilon_{t} \\] Where there are q lags of \\(\\epsilon\\). Below is code to fit an MA(2) model. ggAcf(x[1:74,]) ggPacf(x[1:74,]) x.1 &lt;-data.frame(x) x.ts&lt;-x.1 %&gt;% mutate(date = seq(ymd(&#39;2000-01-01&#39;),ymd(&#39;2000-4-9&#39;),by=&#39;day&#39;)) %&gt;% as_tsibble(index=date) x_train &lt;- x.ts %&gt;% filter(date &lt; &#39;2000-3-15&#39;) autoplot(x_train,x)+labs(title=&quot;Time Series of Simulated Daily series&quot;, x=&quot;Time&quot;, y=&quot;Values&quot;) x.ARIMA &lt;- x_train %&gt;% model(ARIMA(x~pdq(0,0,2)+PDQ(0,0,0))) report(x.ARIMA) ## Series: x ## Model: ARIMA(0,0,2) ## ## Coefficients: ## ma1 ma2 ## -0.2585 0.4874 ## s.e. 0.1031 0.1063 ## ## sigma^2 estimated as 0.2299: log likelihood=-49.88 ## AIC=105.77 AICc=106.11 BIC=112.68 x.ARIMA %&gt;% residuals() %&gt;% ggAcf() x.ARIMA %&gt;% residuals() %&gt;% ggPacf() 4.5 White noise For residuals to exhibit white noise, they must be “independent” and normally distributed with mean 0 and constant variance. You already know how to assess normality and constant variance, however, we need to focus on assessing “independence”. We can assess if there is significant dependence through the Ljung-Box test (or graphically through ACF and PACF plots). The hypotheses being tested are \\[H_{0}:No\\quad significant\\quad autocorrelation\\\\ H_{A}:Significant\\qquad autocorrletion \\] This should be assessed on a stationary time series. Looking at a stationary time series, going back 10 lags should be sufficient (this will be different when we get to seasonal models). Keep in mind that sample size does matter when assessing significance (adjust significance level accordingly). ### Before fitting model: ljung_box(Y[1:731,], lag = 10, dof=0) ## lb_stat lb_pvalue ## 217.3408 0.0000 ## Note: Y is a vector ### After fitting model: augment(Y.ARIMA) %&gt;% features(.innov,ljung_box, lag=10, dof = 2) ## # A tibble: 1 × 3 ## .model lb_stat lb_pvalue ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ARIMA(Y ~ pdq(2, 0, 0) + PDQ(0, 0, 0)) 8.50 0.386 ## Note that dof has changed!! 4.6 Python Code for ARMA/ARIMA models import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from pandas import DataFrame from statsmodels.tsa.stattools import adfuller from statsmodels.graphics.tsaplots import plot_acf from statsmodels.graphics.tsaplots import plot_pacf from statsmodels.tsa.arima.model import ARIMA quotes=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\fpp_insurance.csv&quot;) y=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\ar2.csv&quot;) result=adfuller(quotes[&quot;Quotes&quot;]) print(f&#39;ADF p-value: {result[1]}&#39;) ## ADF p-value: 0.010194998749727997 plot_acf(quotes[&quot;Quotes&quot;],lags=12) pyplot.show() plot_pacf(quotes[&quot;Quotes&quot;],lags=12) pyplot.show ## &lt;function make_python_function.&lt;locals&gt;.python_function at 0x000002C851DF1B40&gt; model = ARIMA(y, order=(2,0,0)) model_fit = model.fit() print(model_fit.summary()) ## SARIMAX Results ## ============================================================================== ## Dep. Variable: Y No. Observations: 1000 ## Model: ARIMA(2, 0, 0) Log Likelihood -3695.014 ## Date: Mon, 19 Aug 2024 AIC 7398.028 ## Time: 10:19:28 BIC 7417.659 ## Sample: 0 HQIC 7405.489 ## - 1000 ## Covariance Type: opg ## ============================================================================== ## coef std err z P&gt;|z| [0.025 0.975] ## ------------------------------------------------------------------------------ ## const -0.1365 0.420 -0.325 0.745 -0.960 0.687 ## ar.L1 0.6406 0.030 21.165 0.000 0.581 0.700 ## ar.L2 -0.3759 0.030 -12.466 0.000 -0.435 -0.317 ## sigma2 94.7853 4.193 22.604 0.000 86.567 103.004 ## =================================================================================== ## Ljung-Box (L1) (Q): 0.02 Jarque-Bera (JB): 0.26 ## Prob(Q): 0.89 Prob(JB): 0.88 ## Heteroskedasticity (H): 1.04 Skew: -0.03 ## Prob(H) (two-sided): 0.73 Kurtosis: 3.05 ## =================================================================================== ## ## Warnings: ## [1] Covariance matrix calculated using the outer product of gradients (complex-step). residuals = DataFrame(model_fit.resid) residuals.plot() pyplot.show() print(residuals.describe()) ## 0 ## count 1000.000000 ## mean -0.001313 ## std 9.747534 ## min -33.282545 ## 25% -6.475670 ## 50% 0.117391 ## 75% 6.510636 ## max 30.318100 plot_acf(residuals,lags=12) pyplot.show() plot_pacf(residuals,lags=12) pyplot.show() Checking for white noise: The first value in the Ljung-Box test is the test statistic and the second value is the p-value. import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from pandas import DataFrame import statsmodels.api as sm from statsmodels.tsa.stattools import adfuller from statsmodels.graphics.tsaplots import plot_acf from statsmodels.graphics.tsaplots import plot_pacf from statsmodels.tsa.arima.model import ARIMA quotes=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\fpp_insurance.csv&quot;) y=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\ar2.csv&quot;) model = ARIMA(y, order=(2,0,0)) model_fit = model.fit() print(model_fit.summary()) ## SARIMAX Results ## ============================================================================== ## Dep. Variable: Y No. Observations: 1000 ## Model: ARIMA(2, 0, 0) Log Likelihood -3695.014 ## Date: Mon, 19 Aug 2024 AIC 7398.028 ## Time: 10:19:29 BIC 7417.659 ## Sample: 0 HQIC 7405.489 ## - 1000 ## Covariance Type: opg ## ============================================================================== ## coef std err z P&gt;|z| [0.025 0.975] ## ------------------------------------------------------------------------------ ## const -0.1365 0.420 -0.325 0.745 -0.960 0.687 ## ar.L1 0.6406 0.030 21.165 0.000 0.581 0.700 ## ar.L2 -0.3759 0.030 -12.466 0.000 -0.435 -0.317 ## sigma2 94.7853 4.193 22.604 0.000 86.567 103.004 ## =================================================================================== ## Ljung-Box (L1) (Q): 0.02 Jarque-Bera (JB): 0.26 ## Prob(Q): 0.89 Prob(JB): 0.88 ## Heteroskedasticity (H): 1.04 Skew: -0.03 ## Prob(H) (two-sided): 0.73 Kurtosis: 3.05 ## =================================================================================== ## ## Warnings: ## [1] Covariance matrix calculated using the outer product of gradients (complex-step). lag_test=[3,4,5,6,7,8,9,10] for x in lag_test: sm.stats.acorr_ljungbox(model_fit.resid, lags=[x], model_df=2) ## lb_stat lb_pvalue ## 3 0.312026 0.57644 ## lb_stat lb_pvalue ## 4 0.48802 0.78348 ## lb_stat lb_pvalue ## 5 0.514998 0.915584 ## lb_stat lb_pvalue ## 6 4.115336 0.390622 ## lb_stat lb_pvalue ## 7 4.12802 0.531135 ## lb_stat lb_pvalue ## 8 4.256921 0.641952 ## lb_stat lb_pvalue ## 9 4.313757 0.743012 ## lb_stat lb_pvalue ## 10 6.360916 0.606873 Fitting ARIMA models. import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib import pyplot from pandas import DataFrame import statsmodels.api as sm from statsmodels.tsa.stattools import adfuller from statsmodels.graphics.tsaplots import plot_acf from statsmodels.graphics.tsaplots import plot_pacf from statsmodels.tsa.arima.model import ARIMA import pmdarima as pm hurricane=pd.read_csv(&quot;Q:\\\\My Drive\\\\Fall 2017 - Time Series\\\\DataR\\\\hurrican.csv&quot;) max_velocity=hurricane[&quot;MeanVMax&quot;] max2=max_velocity.dropna() ### Testing stationarity result=adfuller(max2) print(f&#39;ADF p-value: {result[1]}&#39;) ## ADF p-value: 0.0010116374636738128 ### Same result as auto.arima in R! model1=pm.auto_arima(max2, start_p=0,start_q=0,max_p=5,max_q=5,seasonal=False) model1.summary() SARIMAX Results Dep. Variable: y No. Observations: 155 Model: SARIMAX(0, 1, 1) Log Likelihood -570.040 Date: Mon, 19 Aug 2024 AIC 1144.080 Time: 10:19:30 BIC 1150.154 Sample: 0 HQIC 1146.547 - 155 Covariance Type: opg coef std err z P>|z| [0.025 0.975] ma.L1 -0.9050 0.036 -25.036 0.000 -0.976 -0.834 sigma2 95.0278 10.416 9.123 0.000 74.612 115.443 Ljung-Box (L1) (Q): 0.05 Jarque-Bera (JB): 0.30 Prob(Q): 0.81 Prob(JB): 0.86 Heteroskedasticity (H): 2.10 Skew: 0.08 Prob(H) (two-sided): 0.01 Kurtosis: 3.15 Warnings:[1] Covariance matrix calculated using the outer product of gradients (complex-step). # Force d=0 model2=pm.auto_arima(max2, start_p=0,start_q=0,max_p=5,max_q=5,d=0,seasonal=False) model2.summary() SARIMAX Results Dep. Variable: y No. Observations: 155 Model: SARIMAX(1, 0, 1) Log Likelihood -574.278 Date: Mon, 19 Aug 2024 AIC 1156.556 Time: 10:19:31 BIC 1168.729 Sample: 0 HQIC 1161.500 - 155 Covariance Type: opg coef std err z P>|z| [0.025 0.975] intercept 26.5825 20.863 1.274 0.203 -14.308 67.473 ar.L1 0.7082 0.228 3.103 0.002 0.261 1.156 ma.L1 -0.5717 0.281 -2.031 0.042 -1.123 -0.020 sigma2 97.3309 11.556 8.423 0.000 74.682 119.979 Ljung-Box (L1) (Q): 0.23 Jarque-Bera (JB): 2.12 Prob(Q): 0.63 Prob(JB): 0.35 Heteroskedasticity (H): 1.75 Skew: 0.29 Prob(H) (two-sided): 0.05 Kurtosis: 2.95 Warnings:[1] Covariance matrix calculated using the outer product of gradients (complex-step). 4.7 SAS Code for ARMA/ARIMA AUGMENTED DICKEY-FULLER TESTING proc arima data=Time.fpp_insurance plot=all;   identify var=quotes nlag=10 stationarity=(adf=2);   identify var=quotes(1) nlag=10 stationarity=(adf=2);   run; quit; CORRELATION FUNCTIONS Notice no model statement!   proc arima data=Time.ar2 plot(unpack)=all;   identify var=y nlag=10 outcov=Corr;   estimate method=ML;   run; quit; BUILDING AN AUTOREGRESSIVE MODEL Fit an AR2 model   proc arima data=Time.AR2 plot=all;   identify var=y nlag=10;   estimate p=2 method=ML;   run; quit;   Add another estimate statement proc arima data=Time.AR2 plot=all; identify var=y nlag=10; estimate p=(2) method=ML; estimate p=(1,2,4) method=ML; run; quit;   BUILDING A MOVING AVERAGE MODEL proc arima data=Time.ma2;   identify var=x;   estimate q=2 method=ML;   run; quit;   Need to check for how to take care of trend proc arima data=Time.Ebay9899 plot=all;   identify var=DailyHigh nlag=10 stationarity=(adf=2);   run; quit; It is a random walk!! The way to model a random walk is by using differences   proc arima data=Time.Ebay9899 plot=all;   identify var=DailyHigh(1) nlag=10 stationarity=(adf=2);   run; quit; BUILDING AN AUTOREGRESSIVE MOVING AVERAGE MODEL   (AUTOMATIC SELECTION TECHNIQUES)   Fit an ARIMA model   proc arima data=Time.Hurricanes plot=all;   identify var=MeanVMax nlag=12 stationarity=(adf=2);   run; quit;   Model identification with minimum information criterion (MINIC)   proc arima data=Time.Hurricanes plot=all;   identify var=MeanVMax nlag=12 minic P=(0:12) Q=(0:12);   run; quit;   Model identification with smallest canonical correlation (SCAN);   proc arima data=Time.Hurricanes plot=all;   identify var=MeanVMax nlag=12 scan P=(0:12) Q=(0:12);   run; quit;   Model identificaiton with extended sample autocorrelation function (ESACF)   proc arima data=Time.Hurricanes plot=all;   identify var=MeanVMax nlag=12 esacf P=(0:12) Q=(0:12);   run; quit;   Create estimates with our ARIMA model p=2, q=3   proc arima data=Time.Hurricanes plot=all;   identify var=MeanVMax nlag=12;   estimate p=2 q=3 method=ML;   run; quit; FORECASTING   proc arima data=Time.Hurricanes plot=all;   identify var=MeanVMax nlag=10 ;   estimate p=2 q=3 method=ML;   forecast lead=10;   run; quit; "]]
